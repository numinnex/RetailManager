@page "/products"

@inject IProductEndPoint Prods
@inject IConfiguration Config
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

@attribute [Authorize(Roles ="Cashier") ]

<h3>Products</h3>

<div class="container-fluid">
    @if(products is null)
    {
        <div class="row">
            <p>No products have been loaded</p>
        </div>
    }
    else
    {
        <div class="row">
            @foreach (var p in products)
            {
                <div class="col-xl-4 col-lg-6 mb-3">
                    <div class="container">
                        <div class="row">
                            <div class="col-12">
                                <a href="">
                                    @if(string.IsNullOrWhiteSpace(p.ProductImage))
                                    {
                                        <img src="https://dummyimage.com/1200x900/000000/ffffff&text=Comming+soon" class="img-fluid" alt="Place Holder Image" />
                                    }
                                    else
                                    {
                                        <img src="@( $"{api}{p.ProductImage}" )" class="img-fluid" alt="@p.ProductName" />
                                    }
                                </a>
                                <p class="my-2 text-center">
                                    @p.Description
                                </p>
                                <p class="mb-1">
                                    <strong>
                                        Quantity:
                                    </strong> @p.QuantityInStock
                                </p>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-12">
                                <p class="h5 mb-3"> @p.ProductName - $@p.RetailPrice</p>
                            </div>
                        </div>
                    </div>
                </div>

            }
        </div>
    }
</div>



@code {
    private List<ProductModel> products;
    private string api;
    private const string ProductList = "productList";
    private const string ProductCacheDate = "cacheDate";
    protected override async Task OnInitializedAsync()
    {
        api = Config.GetValue<string>("api");

        products = await LocalStorage.GetItemAsync<List<ProductModel>>(ProductList);
        DateTime? cacheDate = await LocalStorage.GetItemAsync<DateTime?>(ProductCacheDate);

        double totalMinutes = 0;

        if(cacheDate is not null)
        {
            totalMinutes = DateTime.UtcNow.Subtract((DateTime)cacheDate).TotalMinutes;
        }


        if(products is null || cacheDate is null || totalMinutes > 10)
        { 
            try
            {
                products = await Prods.GetAll();
                await LocalStorage.SetItemAsync(ProductList, products);
                await LocalStorage.SetItemAsync(ProductCacheDate,DateTime.UtcNow);
            }
            catch(Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
        }
    }


}
